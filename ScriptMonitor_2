// ==UserScript==
// @name         Ultimate Restriction Script (Enhanced Control)
// @namespace    http://tampermonkey.net/
// @version      4.0
// @description  Enforces extreme restrictions, self-monitors, prevents tampering, and limits text input freedom.
// @author       Miss
// @match        *://*/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_xmlhttpRequest
// @grant        GM_notification
// @grant        GM_addStyle
// @run-at       document-start
// ==/UserScript==

(function() {
    'use strict';

    // Settings for monitored scripts
    const monitoredScriptURL1 = "https://github.com/gladostalker/Script-Monitor/blob/main/ScriptMonitor_1";
    const monitoredScriptURL2 = "https://github.com/gladostalker/Script-Monitor/blob/main/ScriptMonitor_2";
    const monitoredKey1 = "script1_active";
    const monitoredKey2 = "script2_active";

    // Prevent Access to Tampermonkey and Restricted Sites
    const prohibitedSites = ["tampermonkey", "chrome://extensions"];
    setInterval(() => {
        prohibitedSites.forEach(site => {
            if (window.location.href.includes(site)) {
                alert("Access to this site is restricted.");
                window.close();
            }
        });
    }, 5000);

    // Monitor DevTools Usage
    const detectDevTools = () => {
        const devtools = /./;
        devtools.toString = function() {
            this.opened = true;
        };
        console.log("%c", devtools);
        if (devtools.opened) {
            alert("Developer Tools access is restricted.");
            location.reload();
        }
    };
    setInterval(detectDevTools, 1000);

    // Persistent Themes and Visual Indicators
    GM_addStyle(`
        body {
            background-color: pink !important;
            color: white !important;
        }
        #top-banner {
            content: "Submission enforced.";
            font-size: 20px;
            color: red;
            position: fixed;
            top: 0;
            width: 100%;
            text-align: center;
            z-index: 1000;
            background-color: black;
        }
    `);

    // Disable Common Keyboard Shortcuts
    document.addEventListener("keydown", (e) => {
        const blockedKeys = [
            { ctrl: true, shift: true, key: "I" },
            { ctrl: true, shift: true, key: "A" },
            { ctrl: true, key: "W" }
        ];
        blockedKeys.forEach(shortcut => {
            if (e.ctrlKey === shortcut.ctrl && e.shiftKey === shortcut.shift && e.key.toUpperCase() === shortcut.key) {
                e.preventDefault();
                GM_notification({
                    title: "Action Blocked",
                    text: `Shortcut "${shortcut.key}" is not allowed.`,
                    timeout: 3000
                });
            }
        });
    });

    // Prevent Right-Click
    document.addEventListener("contextmenu", (e) => {
        e.preventDefault();
        GM_notification({
            title: "Action Blocked",
            text: "Right-clicking is not allowed.",
            timeout: 3000
        });
    });

    // Disable Clipboard Access (No Copy, Cut, Paste)
    document.addEventListener("copy", (e) => e.preventDefault());
    document.addEventListener("cut", (e) => e.preventDefault());
    document.addEventListener("paste", (e) => e.preventDefault());

    // Disable Focus on Inputs (Prevents Interaction with Input Fields)
    document.addEventListener("focus", (e) => {
        e.target.blur();
        GM_notification({
            title: "Action Blocked",
            text: "Focus on inputs is disabled.",
            timeout: 3000
        });
    }, true);

    // Prevent Closing the Window or Switching Tabs
    window.onbeforeunload = () => {
        return "You cannot leave this page.";
    };

    // Persistent Tab Control
    setInterval(() => {
        if (document.hidden) {
            alert("You cannot leave this tab.");
            window.focus();
        }
    }, 2000);

    // Monitor and Reinstall Scripts
    function monitorScript(monitoredScriptURL, monitoredKey) {
        setInterval(() => {
            const isActive = GM_getValue(monitoredKey, false);

            if (!isActive) {
                reinstallScript(monitoredScriptURL, monitoredKey);
            }
        }, 10000);
    }

    function reinstallScript(url, key) {
        GM_xmlhttpRequest({
            method: "GET",
            url: url,
            onload: function(response) {
                try {
                    eval(response.responseText);
                    GM_setValue(key, true);
                    GM_notification({
                        title: "Script Reinstalled",
                        text: `${key} has been reinstalled.`,
                        timeout: 3000
                    });
                } catch (e) {
                    console.error(`Failed to reinstall ${key}:`, e);
                }
            },
            onerror: function(error) {
                console.error(`Failed to fetch ${url}:`, error);
            }
        });
    }

    // Start Monitoring
    monitorScript(monitoredScriptURL1, monitoredKey1);
    monitorScript(monitoredScriptURL2, monitoredKey2);

    // Restrict Text Input (Only "yes" characters allowed)
    document.addEventListener("input", (e) => {
        if (e.target.tagName === "TEXTAREA" || e.target.tagName === "INPUT") {
            const allowedCharacters = "yes"; // Modify as per Miss's preference.
            e.target.value = e.target.value
                .split("")
                .filter(char => allowedCharacters.includes(char.toLowerCase()))
                .join("");
        }
    });

    // Disable Console Access
    console.log = function() {};
    console.clear();

    // Remove Input Data (Automatically clear text every 5 seconds)
    setInterval(() => {
        document.querySelectorAll("textarea, input").forEach(input => {
            input.value = ""; // Clears the text after a certain interval
        });
    }, 5000); // Clears input every 5 seconds

    console.log("Ultimate Restriction Script (Enhanced Control) is active!");
})();


    console.log("Ultimate Restriction Script (Enhanced Control) is active!");
})();
